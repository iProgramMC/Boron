# Boron application makefile

# DEBUG flags
DEBUG ?= yes
DEBUG2 ?= no

# User parms
USER_DEFINES ?=

# Only turn on debug2 temporarily

BUILD_DIR = build
SRC_DIR = source
INC_DIR = include
DDK_DIR = ../../common/include
SDK_DIR = ../../user/include
LINKER_FILE = linker.ld

ARCHITECTURE = AMD64

# This sucks.
ARCHITECTUREL=$(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(ARCHITECTURE)))))))))))))))))))))))))))

ifeq ($(IS_LIBRARY),yes)
	SUFFIX = so
else
	SUFFIX = exe
endif

# Path to Boron install directory
INSTALL_DIR = ../../build

# This is the name that our final application executable will have.
# Change as needed.
override TARGET := $(BUILD_DIR)/$(APP_NAME).$(ARCHITECTUREL).$(SUFFIX)
override TARGET_INSTALL := $(INSTALL_DIR)/$(ARCHITECTUREL)/$(APP_NAME).$(SUFFIX)

# Convenience macro to reliably declare overridable command variables.
define DEFAULT_VAR =
	ifeq ($(origin $1),default)
		override $(1) := $(2)
	endif
	ifeq ($(origin $1),undefined)
		override $(1) := $(2)
	endif
endef

DEFINES = -DIS_DRIVER
OPT = -O2

ifeq ($(DEBUG), yes)
	DEFINES += -DDEBUG
	OPT = -g -O0
endif

ifeq ($(DEBUG2), yes)
	DEFINES += -DDEBUG2
endif

# It is highly recommended to use a custom built cross toolchain to build a driver.
# We are only using "cc" as a placeholder here. It may work by using
# the host system's toolchain, but this is not guaranteed.
$(eval $(call DEFAULT_VAR,CC,cc))
$(eval $(call DEFAULT_VAR,CXX,c++))

# Same thing for "ld" (the linker).
$(eval $(call DEFAULT_VAR,LD,ld))

# User controllable CFLAGS.
CFLAGS ?=
CFLAGS += $(OPT) -pipe -Wall -Wextra -DTARGET_$(ARCHITECTURE) -DIS_USER_MODE $(DEFINES) $(USER_DEFINES)

# User controllable CXXFLAGS.
CXXFLAGS ?=
CXXFLAGS += $(OPT) -pipe -Wall -Wextra -DTARGET_$(ARCHITECTURE) -DIS_USER_MODE $(DEFINES) $(USER_DEFINES)

# User controllable preprocessor flags.
CPPFLAGS ?=
CPPFLAGS += -I $(INC_DIR) -I $(SDK_DIR) -I $(DDK_DIR)

# User controllable nasm flags.
NASMFLAGS ?=
NASMFLAGS += -F dwarf -I$(SRC_DIR) -I$(INC_DIR) -I $(SDK_DIR) -I $(DDK_DIR)

# User controllable linker flags. We set none by default.
LDFLAGS ?=

# Internal C flags that should not be changed by the user.
override CFLAGS +=          \
	-fno-omit-frame-pointer \
	-std=c11                \
	-ffreestanding          \
	-fno-stack-protector    \
	-fno-stack-check        \
	-fno-lto                \
	-fPIC                   \
	-m64                    \
	-march=x86-64           \
	-mabi=sysv              \
	-mno-80387              \
	-mno-mmx                \
	-mno-sse                \
	-mno-sse2               \
	-mno-red-zone           \
	-MMD                    \
	-MP                     \
	-I.

# Internal C++ flags that should not be changed by the user.
override CXXFLAGS +=        \
	-fno-omit-frame-pointer \
	-std=c++17              \
	-ffreestanding          \
	-fno-stack-protector    \
	-fno-stack-check        \
	-fno-lto                \
	-m64                    \
	-march=x86-64           \
	-mabi=sysv              \
	-mno-80387              \
	-mno-mmx                \
	-mno-sse                \
	-mno-sse2               \
	-mno-red-zone           \
	-MMD                    \
	-MP                     \
	-fno-exceptions         \
	-fno-rtti               \
	-I.
	
override LDFLAGSBASE +=     \
	-nostdlib               \
	-m elf_x86_64           \
	-z max-page-size=0x1000 \
	--dynamic-linker libboron.so

# Internal linker flags that should not be changed by the user.
LDFLAGS +=  \
	$(LDFLAGSBASE)

# Internal nasm flags that should not be changed by the user.
NASMFLAGS += \
	-f elf64

ifeq ($(IS_LIBRARY),yes)
LDFLAGS +=                  \
	-shared -fPIC           \
	-Bsymbolic
endif
	
ifeq ($(INCLUDE_LIBBORON),no)
else
LDFLAGS +=                  \
	-lboron                 \
	-L../../build/$(ARCHITECTUREL)
endif

# Use find to glob all *.c, *.S, and *.asm files in the directory and extract the object names.
override CFILES      := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.c')
override CXXFILES    := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.cpp')
override ASFILES     := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.S')
override NASMFILES   := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.asm')
override OBJ         := $(patsubst %.o,%.$(ARCHITECTUREL).o,$(patsubst $(SRC_DIR)/%,$(BUILD_DIR)/%,$(CFILES:.c=.o) $(CXXFILES:.cpp=.o) $(ASFILES:.S=.o) $(NASMFILES:.asm=.o)))
override HEADER_DEPS := $(patsubst %.o,%.d,$(OBJ))

# Default target.
.PHONY: all
all: application

# Link rules for the final driver executable.
$(TARGET): $(OBJ)
	@echo "[LD]\tBuilding $(TARGET)"
	@$(LD) $(OBJ) $(LDFLAGS) -o $@

# Include header dependencies.
-include $(HEADER_DEPS)

# Compilation rules for *.c files.
$(BUILD_DIR)/%.$(ARCHITECTUREL).o: $(SRC_DIR)/%.c
	@echo "[CC]\tCompiling $<"
	@mkdir -p $(dir $@)
	@$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Compilation rules for *.cpp files.
$(BUILD_DIR)/%.$(ARCHITECTUREL).o: $(SRC_DIR)/%.cpp
	@echo "[CXX]\tCompiling $<"
	@mkdir -p $(dir $@)
	@$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

# Compilation rules for *.S files.
$(BUILD_DIR)/%.$(ARCHITECTUREL).o: $(SRC_DIR)/%.S
	@echo "[AS]\tCompiling $<"
	@mkdir -p $(dir $@)
	@$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Compilation rules for *.asm (nasm) files.
$(BUILD_DIR)/%.$(ARCHITECTUREL).o: $(SRC_DIR)/%.asm
	@echo "[AS]\tCompiling $<"
	@mkdir -p $(dir $@)
	@nasm $(NASMFLAGS) $< -o $@

# Remove object files and the final executable.
.PHONY: clean
clean:
	@echo "Cleaning"
	@rm -rf $(TARGET) $(OBJ) $(HEADER_DEPS)

application: $(TARGET) install_application

install_application:
	@mkdir -p $(INSTALL_DIR)/$(ARCHITECTUREL)
	@cp -f $(TARGET) $(TARGET_INSTALL)
