# Boron test driver makefile

# DEBUG flags
DEBUG ?= yes
DEBUG2 ?= no

# User parms
USER_DEFINES ?=

# Only turn on debug2 temporarily

BUILD_DIR = build
SRC_DIR = source
INC_DIR = include
DDK_DIR = ../../common/include
KE_DIR = ../../boron/include
SCRIPTS_DIR = scripts
LINKER_FILE = linker.ld

DRIVER_ENTRY ?= DriverEntry

TARGET ?= AMD64

# This sucks.
TARGETL=$(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$(TARGET)))))))))))))))))))))))))))

# This is the name that our final driver executable will have.
# Change as needed.
override TARGET_DRIVER := $(BUILD_DIR)/out.$(TARGETL).sys

# Convenience macro to reliably declare overridable command variables.
define DEFAULT_VAR =
	ifeq ($(origin $1),default)
		override $(1) := $(2)
	endif
	ifeq ($(origin $1),undefined)
		override $(1) := $(2)
	endif
endef

DEFINES = -DIS_DRIVER
OPT = -O2

ifeq ($(DEBUG), yes)
	DEFINES += -DDEBUG
	OPT = -g -O0
endif

ifeq ($(DEBUG2), yes)
	DEFINES += -DDEBUG2
endif

include ../../tools/toolchain.mk

# User controllable CFLAGS.
CFLAGS ?= $(OPT) -pipe -Wall -Wextra -DTARGET_$(TARGET) -DBORON_TARGET=\"$(TARGETL)\" -DIS_KERNEL_MODE $(DEFINES) $(USER_DEFINES)

# User controllable CXXFLAGS.
CXXFLAGS ?= $(OPT) -pipe -Wall -Wextra -DTARGET_$(TARGET) -DBORON_TARGET=\"$(TARGETL)\" -DIS_KERNEL_MODE $(DEFINES) $(USER_DEFINES)

# User controllable preprocessor flags.
CPPFLAGS ?= -I $(INC_DIR) -I $(KE_DIR) -I $(DDK_DIR)

# User controllable nasm flags.
NASMFLAGS ?= -F dwarf -I$(SRC_DIR) -I$(INC_DIR) -I $(KE_DIR) -I $(DDK_DIR)

# User controllable linker flags. We set none by default.
LDFLAGS ?=

# Internal C flags that should not be changed by the user.
CFLAGS +=                   \
	-fno-omit-frame-pointer \
	-std=c2x                \
	-ffreestanding          \
	-fno-stack-protector    \
	-fno-stack-check        \
	-fno-lto                \
	-fPIC                   \
	-MMD                    \
	-MP                     \
	-I.                     \
	$(ARCH_CFLAGS)

# Internal C++ flags that should not be changed by the user.
CXXFLAGS +=                 \
	-fno-omit-frame-pointer \
	-std=c++17              \
	-ffreestanding          \
	-fno-stack-protector    \
	-fno-stack-check        \
	-fno-lto                \
	-fPIC                   \
	-fno-reorder-functions  \
	-MMD                    \
	-MP                     \
	-fno-exceptions         \
	-fno-rtti               \
	-I.                     \
	$(ARCH_CFLAGS)
	
LDFLAGSBASE +=              \
	-nostdlib -shared       \
	-e $(DRIVER_ENTRY)      \
	-m $(LINK_ARCH)         \
	$(ARCH_LDFLAGS)

# Internal linker flags that should not be changed by the user.
LDFLAGS +=  \
	$(LDFLAGSBASE)

# Internal nasm flags that should not be changed by the user.
NASMFLAGS += $(ARCH_ASFLAGS)

# Use find to glob all *.c, *.S, and *.asm files in the directory and extract the object names.
override CFILES    := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.c')
override CXXFILES  := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.cpp')
override ASFILES   := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.S')
override NASMFILES := $(shell find -L $(SRC_DIR) -not -path '*/.*' -type f -name '*.asm')
override OBJ := $(patsubst %.o,%.$(TARGETL).o,$(patsubst $(SRC_DIR)/%,$(BUILD_DIR)/%,$(CFILES:.c=.o) $(CXXFILES:.cpp=.o) $(ASFILES:.S=.o) $(NASMFILES:.asm=.o)))
override HEADER_DEPS := $(patsubst %.o,%.d,$(OBJ))

# Default target.
.PHONY: all
all: driver

# Link rules for the final driver executable.
$(TARGET_DRIVER): $(OBJ)
	@echo "[LD]\tBuilding $(TARGET_DRIVER)"
	@$(BLD) $(OBJ) $(LDFLAGS) -o $@

# Include header dependencies.
-include $(HEADER_DEPS)

# Compilation rules for *.c files.
$(BUILD_DIR)/%.$(TARGETL).o: $(SRC_DIR)/%.c
	@echo "[CC]\tCompiling $<"
	@mkdir -p $(dir $@)
	@$(BCC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Compilation rules for *.cpp files.
$(BUILD_DIR)/%.$(TARGETL).o: $(SRC_DIR)/%.cpp
	@echo "[CXX]\tCompiling $<"
	@mkdir -p $(dir $@)
	@$(BCXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

# Compilation rules for *.S files.
$(BUILD_DIR)/%.$(TARGETL).o: $(SRC_DIR)/%.S
	@echo "[AS]\tCompiling $<"
	@mkdir -p $(dir $@)
	@$(BCC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Compilation rules for *.asm (nasm) files.
$(BUILD_DIR)/%.$(TARGETL).o: $(SRC_DIR)/%.asm
	@echo "[AS]\tCompiling $<"
	@mkdir -p $(dir $@)
	@$(BASM) $(NASMFLAGS) $< -o $@

# Remove object files and the final executable.
.PHONY: clean
clean:
	@echo "Cleaning"
	@rm -rf $(TARGET_DRIVER) $(OBJ) $(HEADER_DEPS)

driver: $(TARGET_DRIVER)
